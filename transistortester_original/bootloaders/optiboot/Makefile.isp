# Makefile.isp for Optiboot
# Bill Westfield (WestfW@yahoo.com)  March, 2013
# $Id$
#
# Instructions:
#
# This is a "daughter" Makefile that burns the bootloader using a ISP
# device programmer.  It is designed to inherit assorted variables from
# the parent optiboot "Makefile"...  Using a daughter makefile makes
# certain variable manipulations more obvious.
#
# To burn bootloader .hex file, invoke the main Makefile using:
# make diecimila ISP=1
# make lilypad ISP=1
# make ng ISP=1
# etc...
#
# Please note, that you can also verify a installed Bootloader with
# make lilypad ISP=2
# for example.
#
# Note: inherit paths/etc from parent Makefile.
#
#---------------------------------------------------------------------------
# 
# * Copyright 2013-2015 by Bill Westfield.  Part of Optiboot.
# * reorganized and extended 2017 by K.-H. Kuebbeler
# * This software is licensed under version 2 of the Gnu Public Licence.
# * See optiboot.c for details.
# 
#---------------------------------------------------------------------------

# enter the parameters for the avrdude isp tool  -b19200
#

# Inherit avrdude paths from top-level makefile
AVRDUDE_ROOT ?= $(GCCROOT)

# These are the parameters for a usb-based STK500v2 programmer.
# Exact type unknown.  (historical Makefile values.)
ISPTOOL	   = stk500v2
ISPPORT	   =  usb
ISPSPEED   = -b 115200
#
#
# These are parameters for using an Arduino with the ArduinoISP sketch
#  as the programmer.  On a mac, for a particular Uno as programmer.
#ISPTOOL	= stk500v1
#ISPPORT	= /dev/tty.usbmodemfd3141 
#ISPSPEED 	= -b19200
#
# determine the bit clock (us) for avrdude
BIT_CLOCK = $(shell $(ECHO_CMD) "scale=2;8000000/$(AVR_FREQ)+1" | $(BC_CMD))


ifndef TARGET
 $(error the actual TARGET name is not known)
endif
ifndef FLASH_SIZE
 $(error This makefile should only be called from inside the main optiboot Makefile to get actual fuse data)
endif
ifndef BOOT_PAGE_LEN
 $(error This makefile should only be called from inside the main optiboot Makefile to get actual fuse data)
endif
#ifdef MCU_TARGET
# $(error the actual MCU_TARGET value is not known!)
#endif
ifndef VIRTUAL_BOOT_PARTITION
 VIRTUAL_BOOT_PARTITION = 0
endif


# Not all chips have EFUSE.

ifdef EFUSE
EFUSE_CMD= -U efuse:w:0x$(EFUSE):m
EF_dep = EFUSE.dat
else
EFUSE_CMD= 
EF_dep = 
endif

#
# avrdude commands to erase chip, unlock memory, and program fuses.
#
#  the lock bits can only be activated by writing a 0 bit, bits can be only set with chip erase!

ifeq ($(MCU_TARGET), attiny84)
USE_Edat := 2
endif
ifeq ($(MCU_TARGET), attiny84a)
USE_Edat := 2
endif
ifeq ($(MCU_TARGET), attiny44)
USE_Edat := 2
endif
ifeq ($(MCU_TARGET), attiny44a)
USE_Edat := 2
endif
ifeq ($(MCU_TARGET), attiny24)
USE_Edat := 2
endif
ifeq ($(MCU_TARGET), attiny24a)
USE_Edat := 2
endif
ifeq ($(MCU_TARGET), attiny85)
USE_Edat := 2
endif
ifeq ($(MCU_TARGET), attiny45)
USE_Edat := 2
endif
ifeq ($(MCU_TARGET), attiny25)
USE_Edat := 2
endif
ifeq ($(MCU_TARGET), attiny88)
USE_Edat := 2
endif
ifeq ($(MCU_TARGET), attiny48)
USE_Edat := 2
endif
ifeq ($(MCU_TARGET), attiny861)
USE_Edat := 2
endif
ifeq ($(MCU_TARGET), attiny861a)
USE_Edat := 2
endif
ifeq ($(MCU_TARGET), attiny461)
USE_Edat := 2
endif
ifeq ($(MCU_TARGET), attiny461a)
USE_Edat := 2
endif
ifeq ($(MCU_TARGET), attiny1634)
USE_Edat := 2
endif

ifeq ($(MCU_TARGET), atmega48)
USE_Edat := 2
endif
ifeq ($(MCU_TARGET), atmega48p)
USE_Edat := 2
endif
ifeq ($(MCU_TARGET), atmega88)
USE_Edat := 1
endif
ifeq ($(MCU_TARGET), atmega88p)
USE_Edat := 1
endif
ifeq ($(MCU_TARGET), atmega168)
USE_Edat := 1
endif
ifeq ($(MCU_TARGET), atmega168p)
USE_Edat := 1
endif
ifeq ($(MCU_TARGET), at90pwm2)
USE_Edat := 1
endif
ifeq ($(MCU_TARGET), at90pwm2b)
USE_Edat := 1
endif
ifeq ($(MCU_TARGET), at90pwm3)
USE_Edat := 1
endif

ifndef USE_Edat
# for non special handled processores, set USE_Edat to 0
USE_Edat := 0
endif
#
# build the upper case form of hex values
UC_HFUSE = $(HFUSE_CHANGE)
UC_EFUSE = $(EFUSE_CHANGE)
HFUSE_CHANGE = $(shell $(ECHO_CMD) $(HFUSE) | $(TR_CMD) a-z A-Z)
EFUSE_CHANGE = $(shell $(ECHO_CMD) $(EFUSE) | $(TR_CMD) a-z A-Z)

#
# avrdude commands to program the new bootloader, and protect the bootloader
# space from accidental SPM writes.  Note: "ef" allows boot section to be read
# by the application, which is different than the arduino default.
#
ifeq ($(USE_Edat), 0)
   # most processors have the Bootloader bits BOOTSZ in the HFUSE.
ISPFUSES =	-e -u $(EFUSE_CMD) -U hfuse:w:0x$(shell $(CAT_CMD) HFUSE.dat):m -U lfuse:w:0x$(LFUSE):m
 ifeq ($(VIRTUAL_BOOT_PARTITION), 1)
ISPFLASH =	-U flash:w:$(PROGRAM)_$(TARGET).hex:i 
 else
# program bootloader and set lock bits
ISPFLASH =	-U flash:w:$(PROGRAM)_$(TARGET).hex:i -U lock:w:0xef:m
 endif
endif

ifeq ($(USE_Edat), 1)
ISPFUSES =	-e -u -U efuse:w:0x$(shell $(CAT_CMD) EFUSE.dat):m -U hfuse:w:0x$(HFUSE):m -U lfuse:w:0x$(LFUSE):m
 ifeq ($(VIRTUAL_BOOT_PARTITION), 1)
ISPFLASH =	-U flash:w:$(PROGRAM)_$(TARGET).hex:i 
 else
# program bootloader and set lock bits
ISPFLASH =	-U flash:w:$(PROGRAM)_$(TARGET).hex:i -U lock:w:0xef:m
 endif
endif

ifeq ($(USE_Edat), 2)
    # No fuse correction, no Bootloader feature present.
    # But we can set the SELFPRGEN Bit in the EFUSE
ISPFUSES =	-e -u -U efuse:w:0x$(shell $(ECHO_CMD) "obase=16;ibase=16;(0$(UC_EFUSE) - (0$(UC_EFUSE) % 2))" | $(BC_CMD)):m -U hfuse:w:0x$(HFUSE):m -U lfuse:w:0x$(LFUSE):m
ISPFLASH =	-U flash:w:$(PROGRAM)_$(TARGET).hex 
 ifeq ($(VIRTUAL_BOOT_PARTITION), 0)
 $(error >>>>> Processor $(MCU_TARGET) requires a Bootloader with option VIRTUAL_BOOT_PARTITION ! <<<<<)
 endif
endif

.PHONY = FuseSetPrint FuseChangePrint do_isp

#
# HFUSE.dat is only referenced by isp:
# The command line calls make use of the cat $(CAT_CMD), echo $(ECHO_CMD), tr $(TR_CMD) and bc $(BC_CMD) instructions.
# The echo is used to produce the arithmetic formula for the bc function.
# Input and output of the bc function is set to hex format (base 16).
# Because the bc has no arithmetic and function to clear the BOOTSZ bits,
# a (($(HFUSE) && 2)*2) like subtraction is used to clear both bits.
# The BOOTSZ.dat is created from the real .text length of the bootloader
# and the $(BOOT_PAGE_LEN) variable of the Makefile.
# BOOTSZ.dat = 00 for one boot-page, 01 for two boot-pages,
#              10 for four boot-pages and 11 for eight boot-pages.
# The boot-page length is usually 256, 512 or 1024 bytes. 
# The atmega48/88/168 use the extended fuse for setting the boot length.
# Therefore both values (HFUSE and EFUSE) are estimated, but
# the right one is selected by the $(ISPFUSES) variable.

HFUSE.dat:	$(PROGRAM)_$(TARGET).hex BOOTSZ.dat
ifeq ($(VIRTUAL_BOOT_PARTITION), 1)
	@$(ECHO_CMD) "$(shell $(ECHO_CMD) "obase=16;ibase=16;($(UC_HFUSE) - ($(UC_HFUSE) % 8) ) + ($(shell $(CAT_CMD) BOOTSZ.dat)*2) + 1" | $(BC_CMD))" > HPATCHFUSE.dat \
  ; $(CAT_CMD) HPATCHFUSE.dat > HFUSE.dat \
  ; $(RM_CMD) HPATCHFUSE.dat
else
	@$(ECHO_CMD) "$(shell $(ECHO_CMD) "obase=16;ibase=16;($(UC_HFUSE) - ($(UC_HFUSE) % 8) ) + ($(shell $(CAT_CMD) BOOTSZ.dat)*2) " | $(BC_CMD))" > HPATCHFUSE.dat \
  ; $(CAT_CMD) HPATCHFUSE.dat > HFUSE.dat \
  ; $(RM_CMD) HPATCHFUSE.dat
endif

EFUSE.dat:	$(PROGRAM)_$(TARGET).hex BOOTSZ.dat
ifeq ($(VIRTUAL_BOOT_PARTITION), 1)
	@$(ECHO_CMD) "$(shell $(ECHO_CMD) "obase=16;ibase=16;(0$(UC_EFUSE) - (0$(UC_EFUSE) % 8) ) + ($(shell $(CAT_CMD) BOOTSZ.dat)*2) + 1" | $(BC_CMD))" > EPATCHFUSE.dat \
  ; $(CAT_CMD) EPATCHFUSE.dat > EFUSE.dat \
  ; $(RM_CMD) EPATCHFUSE.dat
else
	@$(ECHO_CMD) "$(shell $(ECHO_CMD) "obase=16;ibase=16;(0$(UC_EFUSE) - (0$(UC_EFUSE) % 8) ) + ($(shell $(CAT_CMD) BOOTSZ.dat)*2)" | $(BC_CMD))" > EPATCHFUSE.dat \
  ; $(CAT_CMD) EPATCHFUSE.dat > EFUSE.dat \
  ; $(RM_CMD) EPATCHFUSE.dat
endif

FuseSetPrint:	$(PROGRAM)_$(TARGET).hex $(PROGRAM)_$(TARGET).lst
ifdef EFUSE
	@$(ECHO_CMD) "   Fuses in Makefile.isp are set to lfuse=0x$(LFUSE), hfuse=0x$(HFUSE), efuse=0x$(EFUSE) for $(MCU_TARGET)"
	@$(ECHO_CMD) "\n; $(ISPFUSES)" >> $(PROGRAM)_$(TARGET).lst
else
	@$(ECHO_CMD) "   Fuses in Makefile.isp are set to lfuse=0x$(LFUSE), hfuse=0x$(HFUSE) for $(MCU_TARGET)"
	@$(ECHO_CMD) "\n; $(ISPFUSES)" >> $(PROGRAM)_$(TARGET).lst
endif

ifeq ($(USE_Edat), 1)
FuseChangePrint: EFUSE.dat BL_StartAdr.dat
	@$(ECHO_CMD) "Bootloader EFUSE = 0x$(shell $(CAT_CMD) EFUSE.dat) [0x$(EFUSE)], BootLoader Start $(shell $(ECHO_CMD) "ibase=16; if (($(shell $(CAT_CMD) EFUSE.dat) % 2) == 0) print \"is enabled to 0x$(shell $(CAT_CMD) BL_StartAdr.dat) \" else print \"is NOT enabled, start at 0!\" " | $(BC_CMD)) "
endif

ifeq ($(USE_Edat), 0)
FuseChangePrint: HFUSE.dat  BL_StartAdr.dat
	@$(ECHO_CMD) "Bootloader HFUSE = 0x$(shell $(CAT_CMD) HFUSE.dat) [0x$(HFUSE)], BootLoader Start $(shell $(ECHO_CMD) "ibase=16; if (($(shell $(CAT_CMD) HFUSE.dat) % 2) == 0) print \"is enabled to 0x$(shell $(CAT_CMD) BL_StartAdr.dat) \" else print \"is NOT enabled, start at 0!\" " | $(BC_CMD)) "
endif

ifeq ($(USE_Edat), 2)
FuseChangePrint:  BL_StartAdr.dat
	@$(ECHO_CMD) "BootLoader Start Address is 0x$(shell $(CAT_CMD) BL_StartAdr.dat), End address of application programs must remain below! "
endif

# There are certain complicated caused by the fact that the default state
# of a fuse is a "1" rather than a "0", especially with respect to fuse bits
# that have not been implemented.  Those would normally not be included, but
# unimplemented fuses still default to being "1"
#
# the efuse should really be 0xf8; since, however, only the lower
# three bits of that byte are used on the atmega168, avrdude gets
# confused if you specify 1's for the higher bits, see:
# http://tinker.it/now/2007/02/24/the-tale-of-avrdude-atmega168-and-extended-bits-fuses/
#
# similarly, the lock bits should be 0xff instead of 0x3f (to
# unlock the bootloader section) and 0xcf instead of 0xef (to
# lock it), but since the high two bits of the lock byte are
# unused, avrdude would get confused.
do_isp: $(PROGRAM)_$(TARGET).hex FuseSetPrint FuseChangePrint HFUSE.dat $(EF_dep) 
ifeq ($(ISP), 4)
        # read complete EEprom 
	$(AVRDUDE_ROOT)avrdude $(AVRDUDE_CONF) -c $(ISPTOOL) -B $(BIT_CLOCK) \
              -p $(MCU_TARGET) -P $(ISPPORT) $(ISPSPEED) \
	      -U eeprom:r:./Read_$(TARGET).eep:i
else
 ifeq ($(ISP), 3)
        # read complete flash 
	$(AVRDUDE_ROOT)avrdude $(AVRDUDE_CONF) -c $(ISPTOOL) -B $(BIT_CLOCK) \
              -p $(MCU_TARGET) -P $(ISPPORT) $(ISPSPEED) \
	      -U flash:r:./Read_$(TARGET).hex:i
 else
  ifeq ($(ISP), 2)
        # verify mode
	$(AVRDUDE_ROOT)avrdude $(AVRDUDE_CONF) -c $(ISPTOOL) -B $(BIT_CLOCK) \
              -p $(MCU_TARGET) -P $(ISPPORT) $(ISPSPEED) \
	      -U flash:v:$(PROGRAM)_$(TARGET).hex:i
  else
        # normal ISP programming mode. ISPFLASH set the Lock-Bits, if required.
	$(AVRDUDE_ROOT)avrdude $(AVRDUDE_CONF) -c $(ISPTOOL) -B 200 \
              -p $(MCU_TARGET) -P $(ISPPORT) $(ISPSPEED) -q -q \
              $(ISPFUSES) 
	$(AVRDUDE_ROOT)avrdude $(AVRDUDE_CONF) -c $(ISPTOOL) -B $(BIT_CLOCK) \
              -p $(MCU_TARGET) -P $(ISPPORT) $(ISPSPEED) -D \
              $(ISPFLASH)
  endif
 endif
endif
#
#Test Output
#do_isp: $(PROGRAM)_$(TARGET).hex HFUSE.dat
#	@$(ECHO_CMD) abhaengig von $(PROGRAM)_$(TARGET).hex
#	@$(ECHO_CMD) AVRDUDE_CONF = $(AVRDUDE_CONF)
#	@$(ECHO_CMD) LFUSE = $(LFUSE)
#	@$(ECHO_CMD) HFUSE = $(HFUSE)
#	@$(ECHO_CMD) MCU_TARGET = $(MCU_TARGET)
#	@$(ECHO_CMD) ISP_FUSES = $(ISPFUSES)
