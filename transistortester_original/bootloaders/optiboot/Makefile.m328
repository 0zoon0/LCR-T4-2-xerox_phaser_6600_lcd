
# Makefile for "mega328" based chips and  platforms.
#
# * Copyright 2013-2015 by Bill Westfield.  Part of Optiboot.
# * reorganized 2017 by K.-H. Kuebbeler
# * This software is licensed under version 2 of the Gnu Public Licence.
# * See optiboot.c for details.
#
#---------------------------------------------------------------------------
#
# Note about fuses:
# the efuse should really be 0xf8; since, however, only the lower
# three bits of that byte are used on the atmega168, avrdude gets
# confused if you specify 1's for the higher bits, see:
# http://tinker.it/now/2007/02/24/the-tale-of-avrdude-atmega168-and-extended-bits-fuses/
#
# similarly, the lock bits should be 0xff instead of 0x3f (to
# unlock the bootloader section) and 0xcf instead of 0x2f (to
# lock it), but since the high two bits of the lock byte are
# unused, avrdude would get confused.
#---------------------------------------------------------------------------
#


# Diecimila, Duemilanove with m168, and NG use identical bootloaders
# Call it "atmega168" for generality and clarity, keep "diecimila" for
# backward compatibility of makefile
#
################################################
# generic atmega168p
# let board specific change the frequency and fuses
ifndef TARGET
atmega168: TARGET := atmega168
endif
ifndef MCU_TARGET
atmega168: MCU_TARGET := atmega168
endif
atmega168: override FLASH_SIZE := 16384
atmega168: override FLASH_PAGE_SIZE := 128
atmega168: override BOOT_PAGE_LEN := 256
ifndef HFUSE
# 2.7V brownout
atmega168: HFUSE := DD
endif
ifndef LFUSE
# Ext. xtal (16MHz) 16KCK/14CK+65ms :=FF
atmega168: LFUSE := FF
endif
ifndef EFUSE
# 512 byte boot
atmega168: EFUSE := FC
endif
ifndef AVR_FREQ
atmega168: AVR_FREQ := 16000000 
endif
atmega168: hex_file


################################################
#  atmega168p
atmega168p: TARGET := atmega168p
atmega168p: MCU_TARGET := atmega168p
export
atmega168p:
	$(SUB_MAKE) atmega168

################################################
#  atmega168a
atmega168a: TARGET := atmega168a
atmega168a: MCU_TARGET := atmega168a
export
atmega168a:
	$(SUB_MAKE) atmega168p

################################################
# generic atmega328
# let board specific change the frequency and fuses
ifndef TARGET
atmega328: TARGET := atmega328
endif
ifndef MCU_TARGET
atmega328: MCU_TARGET := atmega328
endif
atmega328: override FLASH_SIZE := 32768
atmega328: override FLASH_PAGE_SIZE := 128
atmega328: override BOOT_PAGE_LEN := 512
ifndef HFUSE
# 512 byte boot, SPIEN
atmega328: HFUSE := DE
endif
ifndef LFUSE
# Low power xtal (16MHz) 16KCK/14CK+65ms
atmega328: LFUSE := FF
endif
ifndef EFUSE
# 2.7V brownout
atmega328: EFUSE := FD
endif
ifndef AVR_FREQ
atmega328: AVR_FREQ := 16000000
endif
atmega328: hex_file


################################################
# atmega328p
atmega328p: TARGET := atmega328p
atmega328p: MCU_TARGET := atmega328p
export
atmega328p:
	$(SUB_MAKE) atmega328

#
################################################
# generic atmega88
# let board specific change the frequency and fuses
ifndef TARGET
atmega88: TARGET := atmega88
endif
ifndef MCU_TARGET
atmega88: MCU_TARGET := atmega88
endif
atmega88: override FLASH_SIZE := 8192
atmega88: override FLASH_PAGE_SIZE := 64
atmega88: override BOOT_PAGE_LEN := 256
ifndef HFUSE
# 2.7V brownout
atmega88: HFUSE := DD
endif
ifndef LFUSE
# Low power xtal (16MHz) 16KCK/14CK+65ms
atmega88: LFUSE := FF
endif
ifndef EFUSE
# 512 byte boot
atmega88: EFUSE := FC
endif
ifndef AVR_FREQ
atmega88: AVR_FREQ := 16000000 
endif
atmega88: hex_file

#
################################################
# atmega88p
atmega88p: TARGET := atmega88p
atmega88p: MCU_TARGET := atmega88p
export
atmega88p:
	$(SUB_MAKE) atmega88


#---------------------------------------------------------------------------
# "Board-level Platform" targets.
# A "Board-level Platform" implies a manufactured platform with a particular
# AVR_FREQ, LED, and so on.  Parameters are not particularly changable from
# the "make" command line.
# Most of the board-level platform builds should envoke make recursively
#  appropriate specific options
#---------------------------------------------------------------------------
# 20MHz clocked platforms
#
# These are capable of 230400 baud, or 115200 baud on PC (Arduino Avrdude issue)
#

pro20: TARGET := pro_20Mhz
pro20: LED_START_FLASHES := 3
# 4.3V brownout (for max speed!)
pro20: HFUSE := DC
# Full swing xtal (20MHz) 258CK/14CK+4.1ms
pro20: LFUSE := F7
# 512 byte boot
pro20: EFUSE := FC
pro20: AVR_FREQ := 20000000
export
pro20:
	$(SUB_MAKE) atmega168


# 16MHz clocked platforms
#
# These are capable of 230400 baud, or 115200 baud on PC (Arduino Avrdude issue)
#

pro16: TARGET := pro_16MHz
pro16: LED_START_FLASHES := 3
# 2.7V brownout
pro16: HFUSE := DD
# Full swing xtal (20MHz) 258CK/14CK+4.1ms
pro16: LFUSE := F7
# 512 byte boot
pro16: EFUSE := FC
pro16: AVR_FREQ := 16000000
export
pro16:
	$(SUB_MAKE) atmega168


atmega328-Mini: TARGET := atmega328-Mini
atmega328-Mini: MCU_TARGET := atmega328p
atmega328-Mini: LED_START_FLASHES := 0
# 512 byte boot, SPIEN
atmega328-Mini: HFUSE := DE
# Full swing xtal (16MHz) 16k CK/14CK+65ms
atmega328-Mini: LFUSE := F7
# Brwon Out 2.7V
atmega328-Mini: EFUSE := 05
atmega328-Mini: AVR_FREQ := 16000000
export
atmega328-Mini:
	$(SUB_MAKE) atmega328


pro8: TARGET := pro_8MHz
pro8: MCU_TARGET := atmega168p
pro8: LED_START_FLASHES := 3
# 2.7V brownout
pro8: HFUSE := DD
# Full swing xtal (20MHz) 258CK/14CK+4.1ms
pro8: LFUSE := C6
# 512 byte boot
pro8: EFUSE := FC
pro8: AVR_FREQ := 8000000
export
pro8:
	$(SUB_MAKE) atmega168


diecimila: TARGET := diecimila
diecimila: MCU_TARGET := atmega168p
diecimila: LED_START_FLASHES := 3
# 2.7V brownout
diecimila: HFUSE := DD
# Low power xtal (16MHz) 16KCK/14CK+65ms
diecimila: LFUSE := F7
# 512 byte boot
diecimila: EFUSE := FC
export
diecimila:
	$(SUB_MAKE) atmega168


# 8MHz clocked platforms
#
# These are capable of 115200 baud
# Note that "new" Arduinos with an AVR as USB/Serial converter will NOT work
# with an 8MHz target Arduino.  The bitrate errors are in opposite directions,
# and total too large a number.
#

lilypad: TARGET := lilypad
lilypad: LED_START_FLASHES := 3
# 2.7V brownout
lilypad: HFUSE := DD
# Internal 8MHz osc (8MHz) Slow rising power
lilypad: LFUSE := E2
# 512 byte boot
lilypad: EFUSE := FC
lilypad: AVR_FREQ := 8000000
export
lilypad: 
	$(SUB_MAKE) atmega168


# lilypad_resonator is the same as a 8MHz lilypad, except for fuses.
lilypad_resonator: TARGET := lilypad_resonator
lilypad_resonator: LED_START_FLASHES := 3
# 2.7V brownout
lilypad_resonator: HFUSE := DD
# Full swing xtal (20MHz) 258CK/14CK+4.1ms
lilypad_resonator: LFUSE := C6
# 512 byte boot
lilypad_resonator: EFUSE := FC
lilypad_resonator: AVR_FREQ := 8000000
export
lilypad_resonator:
	$(SUB_MAKE) atmega168


atmega328_pro8: TARGET := atmega328_pro_8MHz
atmega328_pro8: MCU_TARGET := atmega328p
atmega328_pro8: LED_START_FLASHES := 3
# 512 byte boot, SPIEN
atmega328_pro8: HFUSE := DE
# Low power xtal (16MHz) 16KCK/14CK+65ms
atmega328_pro8: LFUSE := FF
# 2.7V brownout
atmega328_pro8: EFUSE := FD
atmega328_pro8: AVR_FREQ := 8000000
export
atmega328_pro8:
	$(SUB_MAKE) atmega328



################################################
# 
# Support for the Atmel Xplained mini eval boards that are mostly
#   compatible with Arduino.  (168pb, 328p, and 328pb chips.)
#
# Currently these all masquerade as 168 or 328p, because the IDE
#  does not yet have compiler support for the -pb variants.
#
# These boards have an mEDBG debug chip that:
#   1) means that optiboot can only be programmed via Atmel Studio
#   2) prevents optiboot from working at 115200bps.
#   3) provides 16MHz (at 5V) via Xin on the chip.
#  
# 
#
xplained168pb: TARGET := xplained168pb
xplained168pb: AVR_FREQ := 16000000
xplained168pb: BAUD_RATE := 57600
export
xplained168pb:
	$(MAKE) atmega168

xplained328pb: TARGET := xplained328pb
xplained328pb: AVR_FREQ := 16000000
xplained328pb: BAUD_RATE := 57600
export
xplained328pb:
	$(MAKE) atmega328

xplained328p: TARGET := xplained328p
xplained328p: AVR_FREQ := 16000000
xplained328p: BAUD_RATE := 57600
export
xplained328p:
	$(MAKE) atmega328

#
# ATmega168p [QFN32]
#
atmega168p_lp_isp: TARGET := atmega168p_lp
atmega168p_lp_isp: MCU_TARGET := atmega168p
# 2.7V brownout
atmega168p_lp_isp: HFUSE := DD
# Low power xtal (16MHz) 16KCK/14CK+65ms
atmega168p_lp_isp: LFUSE := FF
# 512 byte boot
atmega168p_lp_isp: EFUSE := FC
atmega168p_lp_isp: VIRTUAL_BOOT_PARTITION := 1
export
atmega168p_lp_isp: 
	$(MAKE) atmega168 ISP=1


#
# Test for virtual boot feature, which is not recommended for the ATmega328
# for virtual boot partition we can use the Flash page size as Boot page length
# no boot section, SPIEN
virboot328: MCU_TARGET := atmega328p
virboot328: HFUSE := DF
export
virboot328: 
	$(SUB_MAKE) atmega328 VIRTUAL_BOOT_PARTITION=1
