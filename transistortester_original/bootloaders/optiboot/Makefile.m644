# Support for AVR Chips ATmega164, ATmega324, ATmega644 and ATmega1284
# You can also select the Pico-Power chips (P) .

# * Copyright 2013-2015 by Bill Westfield.  Part of Optiboot.
# * reorganized 2017 by K.-H. Kuebbeler
# * This software is licensed under version 2 of the Gnu Public Licence.
# * See optiboot.c for details.

#
# Chip level targets
#
################################################
# generic atmega164a
# let board specific change the frequency and fuses
ifndef TARGET
atmega164a: TARGET := atmega164a
endif
ifndef MCU_TARGET
atmega164a: MCU_TARGET := atmega164a
endif
atmega164a: override FLASH_SIZE := 16384
atmega164a: override FLASH_PAGE_SIZE := 128
atmega164a: override BOOT_PAGE_LEN := 256
ifndef HFUSE
# 1024 byte boot
atmega164a: HFUSE := 9C
endif
ifndef LFUSE
# Full Swing xtal (16MHz) 16KCK/14CK+65ms
atmega164a: LFUSE := FF
endif
ifndef EFUSE
# 2.7V brownout
#atmega164p: EFUSE := 05
atmega164a: EFUSE := FD
endif
atmega164a: AVR_FREQ := 16000000
atmega164a: hex_file

#
################################################
# generic atmega164p
atmega164p: TARGET := atmega164p
atmega164p: MCU_TARGET := atmega164p
export
atmega164p:
	$(SUB_MAKE) atmega164a

#
################################################
# generic atmega164a
atmega164: TARGET := atmega164
atmega164: MCU_TARGET := atmega164
export
atmega164:
	$(SUB_MAKE) atmega164a


################################################
# generic atmega324a
# let board specific change the frequency and fuses
ifndef TARGET
atmega324a: TARGET := atmega324a
endif
ifndef MCU_TARGET
atmega324a: MCU_TARGET := atmega324a
endif
atmega324a: override FLASH_SIZE := 32768
atmega324a: override FLASH_PAGE_SIZE := 128
atmega324a: override BOOT_PAGE_LEN := 512
ifndef HFUSE
# 1024 byte boot
atmega324a: HFUSE := 9E
endif
ifndef LFUSE
# Full Swing xtal (16MHz) 16KCK/14CK+65ms
atmega324a: LFUSE := FF
endif
ifndef EFUSE
# 2.7V brownout
#atmega324: EFUSE := 05
atmega324a: EFUSE := FD
endif
atmega324a: AVR_FREQ := 16000000
atmega324a: hex_file

#
################################################
# generic atmega324p
atmega324p: TARGET := atmega324p
atmega324p: MCU_TARGET := atmega324p
export
atmega324p:
	$(SUB_MAKE) atmega324a

#
################################################
# generic atmega324pa
atmega324pa: TARGET := atmega324pa
atmega324pa: MCU_TARGET := atmega324pa
export
atmega324pa:
	$(SUB_MAKE) atmega324a

################################################
# generic atmega644
# let board specific change the frequency and fuses
ifndef TARGET
atmega644: TARGET := atmega644
endif
ifndef MCU_TARGET
atmega644: MCU_TARGET := atmega644
endif
atmega644: override FLASH_SIZE := 65536
atmega644: override FLASH_PAGE_SIZE := 256
atmega644: override BOOT_PAGE_LEN := 1024
ifndef HFUSE
# 1024 byte boot
atmega644: HFUSE := 9E
endif
ifndef LFUSE
# Full Swing xtal (16MHz) 16KCK/14CK+65ms
atmega644: LFUSE := FF
endif
ifndef EFUSE
# 2.7V brownout
#atmega644p: EFUSE := 05
atmega644: EFUSE := FD
endif
atmega644: AVR_FREQ := 16000000
atmega644: hex_file

################################################
# generic atmega644p
atmega644p: TARGET := atmega644p
atmega644p: MCU_TARGET := atmega644p
export
atmega644p: 
	$(SUB_MAKE) atmega644

################################################
# generic atmega644a
atmega644a: TARGET := atmega644a
atmega644a: MCU_TARGET := atmega644a
export
atmega644a: 
	$(SUB_MAKE) atmega644

################################################
# generic atmega644pa
atmega644pa: TARGET := atmega644pa
atmega644pa: MCU_TARGET := atmega644pa
export
atmega644pa: 
	$(SUB_MAKE) atmega644

################################################
# generic atmega1284p
# let board specific change the frequency and fuses
ifndef TARGET
atmega1284p: TARGET := atmega1284p
endif
ifndef MCU_TARGET
atmega1284p: MCU_TARGET := atmega1284p
endif
atmega1284p: override FLASH_SIZE := 131072
atmega1284p: override FLASH_PAGE_SIZE := 256
atmega1284p: override BOOT_PAGE_LEN := 1024
ifndef HFUSE
# 1024 byte boot
atmega1284p: HFUSE := 9F
endif
ifndef LFUSE
# Full Swing xtal (16MHz) 16KCK/14CK+65ms
atmega1284p: LFUSE := FF
endif
ifndef EFUSE
# 2.7V brownout
#atmega1284: EFUSE := 05
atmega1284p: EFUSE := FD
endif
atmega1284p: AVR_FREQ := 16000000
atmega1284p: hex_file


#
# Board-level targets
#

# Sanguino has a minimum boot size of 1024 bytes, so enable extra functions
#
sanguino: TARGET := sanguino
sanguino: MCU_TARGET := atmega644p
sanguino: LED := B0
sanguino: HFUSE := DE
sanguino: LFUSE := F7
sanguino: EFUSE := FD
sanguino: AVR_FREQ := 16000000
export
sanguino:
	$(SUB_MAKE) atmega644


mighty1284: TARGET := mighty1284
mighty1284: LED := B7
mighty1284: HFUSE := DE
mighty1284: LFUSE := F7
mighty1284: EFUSE := FD
mighty1284: AVR_FREQ := 16000000
export
mighty1284:
	$(SUB_MAKE) atmega1284p


bobuino: TARGET := bobuino
bobuino: LED := B7
# 1024 byte boot
bobuino: HFUSE := DE
# Full swing xtal (16MHz) 16KCK/14CK+65ms
bobuino: LFUSE := F7
# 2.7V brownout
#bobuino: EFUSE := 05
bobuino: EFUSE := FD
bobuino: AVR_FREQ := 16000000
export
bobuino: 
	$(SUB_MAKE) atmega1284p


#
# Wicked Devices "Wildfire" boards (1284 with wireless!)
#

wildfirev2: TARGET := wildfirev2
wildfirev2: LED := B7
wildfirev2: BAUD_RATE := 1000000
wildfirev2: HFUSE := DE
wildfirev2: LFUSE := F7
wildfirev2: EFUSE := FD
wildfirev2: AVR_FREQ := 16000000
export
wildfirev2:
	$(SUB_MAKE) atmega1284p


wildfirev3: TARGET := wildfirev3
wildfirev3: LED := B5
wildfirev3: HFUSE := DE
wildfirev3: LFUSE := F7
wildfirev3: EFUSE := FD
wildfirev3: AVR_FREQ := 16000000
export
wildfirev3:
	$(SUB_MAKE) atmega1284p


wildfire: TARGET := wildfire
wildfire: LED := B5
wildfire: HFUSE := DE
wildfire: LFUSE := F7
wildfire: EFUSE := FD
wildfire: AVR_FREQ := 16000000
export
wildfire:
	$(SUB_MAKE) atmega1284p

